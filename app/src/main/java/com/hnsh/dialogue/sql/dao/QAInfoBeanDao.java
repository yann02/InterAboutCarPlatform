package com.hnsh.dialogue.sql.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.hnsh.dialogue.bean.db.QAInfoBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "QAInfo".
*/
public class QAInfoBeanDao extends AbstractDao<QAInfoBean, Long> {

    public static final String TABLENAME = "QAInfo";

    /**
     * Properties of entity QAInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RealId = new Property(0, Long.class, "realId", true, "_id");
        public final static Property Id = new Property(1, long.class, "id", false, "ID");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property IsQuestionOrAnswer = new Property(3, int.class, "isQuestionOrAnswer", false, "IS_QUESTION_OR_ANSWER");
        public final static Property LinkId = new Property(4, long.class, "linkId", false, "LINK_ID");
        public final static Property LinkUpId = new Property(5, long.class, "linkUpId", false, "LINK_UP_ID");
        public final static Property LanguageId = new Property(6, long.class, "languageId", false, "LANGUAGE_ID");
        public final static Property TypeId = new Property(7, long.class, "typeId", false, "TYPE_ID");
        public final static Property SortId = new Property(8, int.class, "sortId", false, "SORT_ID");
    }


    public QAInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public QAInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QAInfo\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: realId
                "\"ID\" INTEGER NOT NULL UNIQUE ," + // 1: id
                "\"CONTENT\" TEXT," + // 2: content
                "\"IS_QUESTION_OR_ANSWER\" INTEGER NOT NULL ," + // 3: isQuestionOrAnswer
                "\"LINK_ID\" INTEGER NOT NULL ," + // 4: linkId
                "\"LINK_UP_ID\" INTEGER NOT NULL ," + // 5: linkUpId
                "\"LANGUAGE_ID\" INTEGER NOT NULL ," + // 6: languageId
                "\"TYPE_ID\" INTEGER NOT NULL ," + // 7: typeId
                "\"SORT_ID\" INTEGER NOT NULL );"); // 8: sortId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QAInfo\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QAInfoBean entity) {
        stmt.clearBindings();
 
        Long realId = entity.getRealId();
        if (realId != null) {
            stmt.bindLong(1, realId);
        }
        stmt.bindLong(2, entity.getId());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
        stmt.bindLong(4, entity.getIsQuestionOrAnswer());
        stmt.bindLong(5, entity.getLinkId());
        stmt.bindLong(6, entity.getLinkUpId());
        stmt.bindLong(7, entity.getLanguageId());
        stmt.bindLong(8, entity.getTypeId());
        stmt.bindLong(9, entity.getSortId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QAInfoBean entity) {
        stmt.clearBindings();
 
        Long realId = entity.getRealId();
        if (realId != null) {
            stmt.bindLong(1, realId);
        }
        stmt.bindLong(2, entity.getId());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
        stmt.bindLong(4, entity.getIsQuestionOrAnswer());
        stmt.bindLong(5, entity.getLinkId());
        stmt.bindLong(6, entity.getLinkUpId());
        stmt.bindLong(7, entity.getLanguageId());
        stmt.bindLong(8, entity.getTypeId());
        stmt.bindLong(9, entity.getSortId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QAInfoBean readEntity(Cursor cursor, int offset) {
        QAInfoBean entity = new QAInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // realId
            cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.getInt(offset + 3), // isQuestionOrAnswer
            cursor.getLong(offset + 4), // linkId
            cursor.getLong(offset + 5), // linkUpId
            cursor.getLong(offset + 6), // languageId
            cursor.getLong(offset + 7), // typeId
            cursor.getInt(offset + 8) // sortId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QAInfoBean entity, int offset) {
        entity.setRealId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getLong(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsQuestionOrAnswer(cursor.getInt(offset + 3));
        entity.setLinkId(cursor.getLong(offset + 4));
        entity.setLinkUpId(cursor.getLong(offset + 5));
        entity.setLanguageId(cursor.getLong(offset + 6));
        entity.setTypeId(cursor.getLong(offset + 7));
        entity.setSortId(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QAInfoBean entity, long rowId) {
        entity.setRealId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QAInfoBean entity) {
        if(entity != null) {
            return entity.getRealId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QAInfoBean entity) {
        return entity.getRealId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
