package com.hnsh.dialogue.sql.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.hnsh.dialogue.bean.db.TypeInfoBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "TypeInfo".
*/
public class TypeInfoBeanDao extends AbstractDao<TypeInfoBean, Long> {

    public static final String TABLENAME = "TypeInfo";

    /**
     * Properties of entity TypeInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TypeName = new Property(1, String.class, "typeName", false, "TYPE_NAME");
        public final static Property TypeId = new Property(2, long.class, "typeId", false, "TYPE_ID");
        public final static Property TypePid = new Property(3, long.class, "typePid", false, "TYPE_PID");
        public final static Property TypeLevel = new Property(4, int.class, "typeLevel", false, "TYPE_LEVEL");
        public final static Property Sort = new Property(5, int.class, "sort", false, "SORT");
    }


    public TypeInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TypeInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TypeInfo\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE_NAME\" TEXT," + // 1: typeName
                "\"TYPE_ID\" INTEGER NOT NULL UNIQUE ," + // 2: typeId
                "\"TYPE_PID\" INTEGER NOT NULL ," + // 3: typePid
                "\"TYPE_LEVEL\" INTEGER NOT NULL ," + // 4: typeLevel
                "\"SORT\" INTEGER NOT NULL );"); // 5: sort
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TypeInfo\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TypeInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(2, typeName);
        }
        stmt.bindLong(3, entity.getTypeId());
        stmt.bindLong(4, entity.getTypePid());
        stmt.bindLong(5, entity.getTypeLevel());
        stmt.bindLong(6, entity.getSort());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TypeInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(2, typeName);
        }
        stmt.bindLong(3, entity.getTypeId());
        stmt.bindLong(4, entity.getTypePid());
        stmt.bindLong(5, entity.getTypeLevel());
        stmt.bindLong(6, entity.getSort());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TypeInfoBean readEntity(Cursor cursor, int offset) {
        TypeInfoBean entity = new TypeInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // typeName
            cursor.getLong(offset + 2), // typeId
            cursor.getLong(offset + 3), // typePid
            cursor.getInt(offset + 4), // typeLevel
            cursor.getInt(offset + 5) // sort
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TypeInfoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTypeName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTypeId(cursor.getLong(offset + 2));
        entity.setTypePid(cursor.getLong(offset + 3));
        entity.setTypeLevel(cursor.getInt(offset + 4));
        entity.setSort(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TypeInfoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TypeInfoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TypeInfoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
